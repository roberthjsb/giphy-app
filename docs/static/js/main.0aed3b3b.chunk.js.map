{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","services/getGif.js","hooks/useGifFetch.js","components/GifGrid.js","components/GifApp.js","App.js","serviceWorker.js","index.js"],"names":["AddCategory","setCategories","useState","category","setCategory","onSubmit","e","preventDefault","categoryItems","type","value","onChange","target","GifGridItem","img","className","src","url","alt","title","GetGif","search","a","fetch","resp","json","data","gif","map","id","images","downsized_medium","useGifFetch","loading","state","setState","useEffect","then","imgs","GifGrid","key","GifApp","React","categories","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NA6BeA,EA1BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACLC,mBAAS,IADJ,mBAC9BC,EAD8B,KACpBC,EADoB,KAWrC,OACI,0BAAMC,SANW,SAACC,GAClBA,EAAEC,iBACFN,GAAc,SAAAO,GAAa,OAAGL,GAAH,mBAAeK,OAC1CJ,EAAY,MAIR,2BACIK,KAAK,OACLC,MAAOP,EACPQ,SAbS,SAACL,GAClBF,EAAYE,EAAEM,OAAOF,YCSdG,EAbK,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACnB,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKF,EAAIG,IAAKC,IAAKJ,EAAIK,QAC5B,2BAAIL,EAAIK,S,uBCMLC,EAbH,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACLL,EADK,iDAC2CI,EAD3C,+DAEQE,MAAMN,GAFd,cAELO,EAFK,gBAGYA,EAAKC,OAHjB,uBAGHC,EAHG,EAGHA,KACFC,EAAMD,EAAKE,KAAI,SAAAd,GAAQ,IAAD,EACxB,MAAO,CACHe,GAAIf,EAAIe,GACRV,MAAOL,EAAIK,MACXF,IAAG,UAAEH,EAAIgB,cAAN,aAAE,EAAYC,iBAAiBd,QAR/B,kBAWJU,GAXI,4CAAH,sDCiBGK,EAbK,SAAA7B,GAAa,IAAD,EACFD,mBAAS,CAC/BwB,KAAM,GAAIO,SAAS,IAFK,mBACrBC,EADqB,KACdC,EADc,KAU5B,OANAC,qBAAU,WACNhB,EAAOjB,GACNkC,MAAK,SAAAC,GACFH,EAAS,CAACT,KAAKY,EAAKL,SAAQ,SAEjC,CAAC9B,IACG+B,GCQIK,EAjBC,SAAC,GAAkB,IAAhBpC,EAAe,EAAfA,SAAe,EACA6B,EAAY7B,GAA9B2B,EADkB,EACvBJ,KAAYO,EADW,EACXA,QACnB,OACI,6BACI,4BAAK9B,GACJ8B,GAAW,yCACZ,yBAAKlB,UAAU,aACRe,EAAOF,KAAI,SAAAd,GAAG,OAAI,kBAAC,EAAD,CAAa0B,IAAK1B,EAAIe,GAAIf,IAAKA,UCYrD2B,EApBC,WAAM,MAEkBC,IAAMxC,SAAS,IAFjC,mBAEXyC,EAFW,KAEC1C,EAFD,KAIlB,OACI,oCACI,sCACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQ0C,EAAWf,KAAI,SAAAzB,GAAQ,OACvB,kBAAC,EAAD,CAASqC,IAAKrC,EAAUA,SAAUA,UCJvCyC,MARf,WACE,OACE,yBAAK7B,UAAU,OACd,kBAAC,EAAD,QCKe8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0aed3b3b.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [category, setCategory] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setCategory(e.target.value)\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setCategories(categoryItems=>[category,...categoryItems]);\r\n        setCategory('');\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value={category}\r\n                onChange={handleChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GifGridItem = ({ img }) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={img.url} alt={img.title} />\r\n            <p>{img.title}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nGifGridItem.propTypes = {\r\n\r\n};\r\n\r\nexport default GifGridItem;","const GetGif = async (search) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${search}&limit=10&api_key=rh14ApmNaRWVMOLMt2IC7QRKcUlGTAvg`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gif = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gif\r\n};\r\nexport default GetGif;","import { useState, useEffect } from 'react';\r\nimport GetGif from '../services/getGif'\r\n\r\n\r\nconst useGifFetch = category => {\r\n    const [state, setState] = useState({\r\n        data: [], loading: true\r\n    });\r\n    useEffect(() => {\r\n        GetGif(category)\r\n        .then(imgs=>{\r\n            setState({data:imgs,loading:false});\r\n        });\r\n    }, [category])\r\n    return state;\r\n}\r\n\r\nexport default useGifFetch\r\n","import React ,{useState} from 'react';\r\nimport GifGridItem from './GifGridItem';\r\nimport useGifFetch from '../hooks/useGifFetch'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    const {data:images,loading} = useGifFetch(category);\r\n    return (\r\n        <div>\r\n            <h3>{category}</h3>\r\n            {loading && <p>loading...</p>}\r\n            <div className=\"card-grid\">\r\n                {  images.map(img => <GifGridItem key={img.id} img={img}/>) }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GifGrid;","import React from 'react';\r\nimport AddCategory from './AddCategory'\r\nimport GifGrid from './GifGrid'\r\n\r\nconst GifApp  = () => {\r\n    // const categories =['One Punch','Samurai X','Dragon ball']\r\n    const [categories, setCategories] = React.useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map(category=>(\r\n                    <GifGrid key={category} category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifApp;","import React from 'react';\nimport './App.css';\nimport GifApp from './components/GifApp'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <GifApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}